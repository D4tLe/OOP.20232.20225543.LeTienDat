7. Cart and Store are aggregated from Media


8. If the passing object is not an object of Media, the function "equals" will return false.


9. In this code snippet, an ArrayList called mediae is created to store objects of type Media.

Next, objects are created and added to mediae.

After that, a for-each loop is used to iterate over each element in the mediae ArrayList. The loop variable element represents each object in the ArrayList in each iteration.

Within the loop, element.toString() is called to convert the current object element to its string representation. This string representation is then printed to the console using System.out.println().


10. - The class that should implement the Comparable interface is Media as it aggregates Cart and Store.

- For example if we implement sort by title then by cost:
public int compareTo(Media other) {
    int titleComparison = this.getTitle().compareTo(other.getTitle());
    
    if (titleComparison == 0) {
        return Double.compare(other.getCost(), this.getCost());
    }
    
    return titleComparison;
}

- Using the Comparable interface approach, we can only have one natural ordering for the items. In this case, it would be either by title and then by cost, or by cost and then by title. We cannot have both ordering rules at the same time.

- public class Dvd extends Media {
    
    @Override
    public int compareTo(Media other) {
        if (other instanceof Dvd) {
            Dvd otherDvd = (Dvd) other;
            
            int titleComparison = this.getTitle().compareTo(otherDvd.getTitle());
            
            if (titleComparison == 0) {
		int lengthComparison = Integer.compare(otherDvd.getLength(), this.getLength());
                
                if (lengthComparison == 0) {
                    return Double.compare(this.getCost(), otherDvd.getCost());
                }
        
                return lengthComparison;
            }
            
            return titleComparison;
        }
        return super.compareTo(other);
    }
}
